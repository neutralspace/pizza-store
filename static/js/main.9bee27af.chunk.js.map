{"version":3,"sources":["reducers/session-reducer.ts","actions/pizzas/constants.ts","api/config.ts","actions/session/constants.ts","actions/session/action-creators.ts","utils/cookie/constants.ts","utils/cookie/cookieHandler.ts","helpers/index.ts","api/databaseHandler.ts","actions/pizzas/thunks.ts","reducers/form-reducer.ts","reducers/pizzas-reducer.ts","actions/user/constants.ts","actions/user/action-creators.ts","reducers/user-reducer.ts","components/common/Title/Title.tsx","reducers/index.ts","store/index.ts","components/common/Logo/Logo.tsx","components/common/CurrencySign/CurrencySign.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/common/Button/Button.tsx","components/common/Input/Input.tsx","components/abstract/AbstractPizza/AbstractPizza.tsx","components/PizzasList/Pizza/Pizza.tsx","components/abstract/AbstractPizzasList/AbstractPizzasList.tsx","components/PizzasList/PizzasList.tsx","actions/cart/thunks.ts","containers/PizzasListContainer.ts","actions/pizzas/action-creators.ts","components/AuthRegModal/AuthRegModal.tsx","pages/MainPage/MainPage.tsx","components/PizzasOrderList/OrderedPizza/OrderedPizza.tsx","components/PizzasOrderList/PizzasOrderList.tsx","components/Order/Totals/Totals.tsx","components/Order/Order.tsx","containers/OrderContainer.ts","components/abstract/AbstractForm/AbstractForm.tsx","utils/validator/constants.ts","utils/validator/rules.ts","utils/validator/validator.ts","components/forms/CheckoutForm/CheckoutForm.tsx","containers/CheckoutFormContainer.ts","actions/user/thunks.ts","pages/CheckoutPage/CheckoutPage.tsx","components/forms/AuthForm/AuthForm.tsx","containers/AuthFormContainer.ts","components/forms/RegForm/RegForm.tsx","containers/RegFormContainer.ts","components/OrdersHistory/OrdersHistory.tsx","containers/OrdersHistoryContainer.ts","pages/OrderHistoryPage/OrdersHistoryPage.tsx","App.tsx","containers/AppContainer.ts","actions/session/thunks.ts","index.tsx"],"names":["CURRENCY_TYPES","GET_PIZZAS_LIST","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apiConfig","getPizzasList","url","mapResponse","response","val","getSessionData","setSessionData","createSessionId","String","numChildren","changeCurrency","updateCart","authorizeAndGetUserData","password","responseData","Boolean","setUserData","checkIfUserExists","getUserData","addToOrderHistory","GET_SESSION_DATA","getSessionDataAction","data","type","payload","session","SESSION_COOKIE_KEY","USER_COOKIE_KEY","CookieHandler","Cookies","get","value","set","expires","createPriceObj","priceInEuros","priceInDollars","EURO","DOLLAR","defaultSessionState","id","undefined","cart","items","totalQty","totalPrice","currency","sessionReducer","action","DatabaseHandler","database","firebase","apps","length","this","initializeApp","Promise","resolve","reject","ref","once","then","snapshot","catch","error","sessionId","urlTemplate","replace","newCurrency","newSessionId","newSession","newSessionData","newCart","email","userId","name","surname","order","orderId","Date","now","_instance","FORM_TYPES","databaseHandler","GET_INSTANCE","pizzasReducer","pizzasList","GET_USER_DATA","USER_NOT_FOUND","USER_ALREADY_EXISTS","CLEAR_FORMS_ERRORS","getUserDataAction","user","clearFormsErrorsAction","defaultUserData","userReducer","userData","TITLE_SIZES","defaultFormsData","AUTH","REG","formReducer","formsState","combineReducers","pizzas","forms","store","createStore","rootReducer","applyMiddleware","thunk","Logo","to","className","memo","CURRENCY_CONTENT_BY_TYPE","CurrencySign","props","Header","chosenCurrency","cartItemsQty","openAuthModalHandler","isUserAuthorized","handleCurrencyChange","e","currencyType","preventDefault","Container","href","role","onClick","Footer","Button","children","defaultProps","Input","componentProps","label","errorText","classNameFromProps","attrs","AbstractPizza","handleQtyChange","bind","handleAddToCart","updateCartHandler","newQty","Number","currentTarget","React","PureComponent","Pizza","price","img","isInCart","cartQty","src","alt","min","defaultValue","onChange","AbstractPizzasList","pizzaId","dispatchUpdateCart","updatedCart","updatedPizza","qty","getTotals","cartItems","itemsKeys","Object","keys","initialTotals","reduce","totals","itemKey","itemQty","itemEuroPrice","itemDollarPrice","PizzasList","pizzasIds","pizzasInCart","Row","map","pizzaProps","Col","sm","xs","key","dispatch","getSessionId","console","log","connect","state","getPizzasListAction","Title","tag","size","createElement","MainPage","LG","PizzasListContainer","OrderedPizza","noCartAction","PizzasOrderList","Totals","SM","Order","AbstractForm","fieldsValidationRules","handleValueChange","handleSubmit","validateForm","sendForm","valueKey","field","fields","newValue","setState","onSuccessCallback","validatedFields","hasErrors","validationRule","NAME_RESTRICTIONS","MIN_SYMBOLS_COUNT","MAX_SYMBOLS_COUNT","REG_EXP","SURNAME_RESTRICTIONS","EMAIL_RESTRICTIONS","PASSWORD_RESTRICTIONS","nameValidation","test","surnameValidation","emailValidation","passwordValidation","Validator","CheckoutForm","address","getNameError","getSurnameError","getEmailError","getAddressError","fieldsKeys","onSubmit","fieldProps","MD","getUserId","CheckoutPage","CheckoutFormContainer","OrderContainer","AuthForm","getAuthPasswordError","authorizeUser","toLowerCase","formState","setUserId","RegForm","getRegistrationPasswordError","registerUser","isExists","AuthRegModal","isModalOpen","onHideHandler","useState","activeForm","setActiveForm","toggleActiveForm","Modal","show","onHide","centered","AuthFormContainer","RegFormContainer","OrdersHistory","orders","ordersIds","timestamp","date","getDay","getMonth","getFullYear","createDate","OrdersHistoryPage","OrdersHistoryContainer","App","setIsModalOpen","useEffect","exact","path","component","createSession","setSessionId","ReactDOM","render","StrictMode","AppContainer","document","getElementById"],"mappings":"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","file":"static/js/main.9bee27af.chunk.js","sourcesContent":["import { ActionObjectType } from '@actions/common';\r\nimport { GET_SESSION_DATA } from '@actions/session';\r\nimport { PizzasListType } from './pizzas-reducer';\r\nimport { createPriceObj } from '../helpers';\r\n\r\nexport enum CURRENCY_TYPES {\r\n  EURO,\r\n  DOLLAR,\r\n}\r\n\r\nexport interface PriceType {\r\n  [CURRENCY_TYPES.EURO]: number;\r\n  [CURRENCY_TYPES.DOLLAR]: number;\r\n}\r\n\r\nexport interface CartType {\r\n  items: PizzasListType;\r\n  totalQty: number;\r\n  totalPrice: PriceType;\r\n}\r\n\r\nexport interface SessionType {\r\n  id: number | undefined;\r\n  cart: CartType;\r\n  currency: CURRENCY_TYPES;\r\n}\r\n\r\nexport const defaultSessionState: SessionType = {\r\n  id: undefined,\r\n  cart: {\r\n    items: {},\r\n    totalQty: 0,\r\n    totalPrice: createPriceObj(0, 0),\r\n  },\r\n  currency: CURRENCY_TYPES.EURO,\r\n}\r\n\r\nconst sessionReducer = (session = defaultSessionState, action: ActionObjectType): SessionType => {\r\n  switch (action.type) {\r\n    case GET_SESSION_DATA:\r\n      return {\r\n        ...session,\r\n        ...action.payload.session,\r\n      };\r\n    default:\r\n      return session;\r\n  }\r\n}\r\n\r\nexport default sessionReducer;","export const GET_PIZZAS_LIST = 'GET_PIZZAS_LIST';","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyBPWZIwv-G1xAO3F9NdAWFcXxgM6rPTLxw\",\r\n  authDomain: \"coolpizzasstore.firebaseapp.com\",\r\n  databaseURL: \"https://coolpizzasstore.firebaseio.com\",\r\n  projectId: \"coolpizzasstore\",\r\n  storageBucket: \"coolpizzasstore.appspot.com\",\r\n  messagingSenderId: \"660399626549\",\r\n  appId: \"1:660399626549:web:698939cb3f0eeb6207147c\"\r\n};\r\n\r\nexport const apiConfig = {\r\n  getPizzasList: {\r\n    url: '/pizzas',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n      return response.val();\r\n    }\r\n  },\r\n  getSessionData: {\r\n    url: '/sessions/{sessionId}',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n      return response.val();\r\n    }\r\n  },\r\n  setSessionData: {\r\n    url: '/sessions/{sessionId}',\r\n  },\r\n  createSessionId: {\r\n    url: '/sessions/',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n      return String(response.numChildren() + 1);\r\n    }\r\n  },\r\n  changeCurrency: {\r\n    url: '/sessions/{sessionId}/currency',\r\n  },\r\n  updateCart: {\r\n    url: '/sessions/{sessionId}/cart',\r\n  },\r\n  authorizeAndGetUserData: {\r\n    url: '/users/{userId}',\r\n    mapResponse: (response, password) => {\r\n      if (!response) return null;\r\n\r\n      const responseData = response.val();\r\n      if (!Boolean(responseData?.password)\r\n          || String(responseData?.password) !== String(password)) return null;\r\n      return responseData;\r\n    }\r\n  },\r\n  setUserData: {\r\n    url: '/users/{userId}',\r\n  },\r\n  checkIfUserExists: {\r\n    url: '/users/{userId}',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n\r\n      return Boolean(response.val());\r\n    }\r\n  },\r\n  getUserData: {\r\n    url: '/users/{userId}',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n      return response.val();\r\n    }\r\n  },\r\n  addToOrderHistory: {\r\n    url: '/users/{userId}/orders/{orderId}',\r\n    mapResponse: (response) => {\r\n      if (!response) return null;\r\n      return response.val();\r\n    }\r\n  },\r\n}","export const GET_SESSION_DATA = 'GET_SESSION_DATA';\r\nexport const SET_SESSION_DATA = 'SET_SESSION_DATA';\r\n","import { ActionObjectType } from '../common/constants';\r\nimport { GET_SESSION_DATA } from './constants';\r\nimport { SessionType } from '@reducers/session-reducer';\r\n\r\nexport const getSessionDataAction = (data: SessionType): ActionObjectType => ({\r\n  type: GET_SESSION_DATA,\r\n  payload: {\r\n    session: data,\r\n  },\r\n});","export const SESSION_COOKIE_KEY = 'sessionId';\r\nexport const USER_COOKIE_KEY = 'userId';\r\n","import Cookies from 'js-cookie';\r\nimport { SESSION_COOKIE_KEY, USER_COOKIE_KEY } from './constants';\r\n\r\nconst COOKIE_EXPIRE_DAYS = 7;\r\n\r\n/**\r\n * Class for cookie handling. All methods are static.\r\n */\r\nclass CookieHandler {\r\n  static getSessionId(): string {\r\n    return Cookies.get(SESSION_COOKIE_KEY);\r\n  }\r\n\r\n  static setSessionId(value: string): void {\r\n    Cookies.set(SESSION_COOKIE_KEY, value, { expires: COOKIE_EXPIRE_DAYS });\r\n  }\r\n\r\n  static getUserId(): string {\r\n    return Cookies.get(USER_COOKIE_KEY);\r\n  }\r\n\r\n  static setUserId(value: string): void {\r\n    Cookies.set(USER_COOKIE_KEY, value, { expires: COOKIE_EXPIRE_DAYS });\r\n  }\r\n}\r\n\r\nexport default CookieHandler;\r\n","import { CURRENCY_TYPES } from '@reducers/session-reducer';\r\n\r\nexport const createPriceObj = (priceInEuros: number, priceInDollars: number) => ({\r\n  [CURRENCY_TYPES.EURO]: priceInEuros,\r\n  [CURRENCY_TYPES.DOLLAR]: priceInDollars,\r\n});\r\n","import firebase from 'firebase';\r\nimport { apiConfig, firebaseConfig } from './config';\r\nimport { PizzasListType } from '@reducers/pizzas-reducer';\r\nimport { CartType, SessionType, defaultSessionState } from '@reducers/session-reducer';\r\nimport { UserDataType} from '@reducers/user-reducer';\r\nimport {CURRENCY_TYPES} from '../reducers/session-reducer';\r\n\r\n/**\r\n * Singleton class for handling all database interactions.\r\n */\r\nexport default class DatabaseHandler {\r\n  private static _instance: DatabaseHandler;\r\n  private database: {[key: string]: any};\r\n\r\n  private constructor() {\r\n    if (!firebase.apps.length) {\r\n      this.database = firebase.initializeApp(firebaseConfig).database();\r\n    }\r\n  }\r\n\r\n  static GET_INSTANCE(): DatabaseHandler {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n\r\n  getPizzasList(): Promise<PizzasListType> {\r\n    const { url, mapResponse } = apiConfig.getPizzasList;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        resolve(mapResponse(snapshot));\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  getSessionData(sessionId?: string): Promise<SessionType> {\r\n    const { url: urlTemplate, mapResponse } = apiConfig.getSessionData;\r\n    const url = urlTemplate.replace('{sessionId}', sessionId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        resolve(mapResponse(snapshot));\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  changeCurrency(sessionId?: string, newCurrency?: CURRENCY_TYPES): Promise<SessionType> {\r\n    const { url: urlTemplate } = apiConfig.changeCurrency;\r\n    const url = urlTemplate.replace('{sessionId}', sessionId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).set(newCurrency, (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        this.getSessionData(sessionId).then((data) => {\r\n          resolve(data);\r\n        }).catch((error) => {\r\n          reject(error);\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  createSession(): Promise<SessionType> {\r\n    const { url, mapResponse } = apiConfig.createSessionId;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        const newSessionId = mapResponse(snapshot);\r\n\r\n        if (!newSessionId) reject();\r\n\r\n        this.setSessionData(newSessionId, {\r\n          ...defaultSessionState,\r\n          id: newSessionId,\r\n        }).then((newSession) => {\r\n          resolve(newSession);\r\n        }).catch((error) => {\r\n          reject(error);\r\n        });\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  setSessionData(sessionId: string, newSessionData: SessionType): Promise<SessionType> {\r\n    const { url: urlTemplate } = apiConfig.setSessionData;\r\n    const url = urlTemplate.replace('{sessionId}', sessionId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).set(newSessionData, (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        this.getSessionData(sessionId).then((data) => {\r\n          resolve(data);\r\n        }).catch((error) => {\r\n          reject(error);\r\n        })\r\n      });\r\n    });\r\n  }\r\n\r\n  updateCart(sessionId: string, newCart: CartType): Promise<SessionType> {\r\n    const { url: urlTemplate } = apiConfig.updateCart;\r\n    const url = urlTemplate.replace('{sessionId}', sessionId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(`${url}`).set(newCart, (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        this.getSessionData(sessionId).then((data) => {\r\n            resolve(data);\r\n          }).catch((error) => {\r\n            reject(error);\r\n          })\r\n        });\r\n    });\r\n  }\r\n\r\n  authorizeAndGetUserData(email: string, password: string): Promise<UserDataType> {\r\n    const { url: urlTemplate, mapResponse } = apiConfig.getUserData;\r\n    const userId = email?.replace(/\\./g, '*');\r\n    const url = urlTemplate.replace('{userId}', userId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        resolve(mapResponse(snapshot, password));\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  getUserData(email: string, password: string): Promise<UserDataType> {\r\n    const { url: urlTemplate, mapResponse } = apiConfig.getUserData;\r\n    const userId = email?.replace(/\\./g, '*');\r\n    const url = urlTemplate.replace('{userId}', userId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        resolve(mapResponse(snapshot, password));\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  setUserData(email: string, password: string, name: string, surname: string): Promise<UserDataType> {\r\n    const {url: urlTemplate } = apiConfig.setUserData;\r\n    const userId = email?.replace(/\\./g, '*');\r\n    const url = urlTemplate.replace('{userId}', userId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(`${url}`).set({\r\n        id: userId,\r\n        email,\r\n        password,\r\n        name,\r\n        surname,\r\n      }, (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        resolve(userId);\r\n      });\r\n    });\r\n  }\r\n\r\n  checkIfUserExists(email: string): Promise<boolean> {\r\n    const { url: urlTemplate, mapResponse } = apiConfig.checkIfUserExists;\r\n    const userId = email?.replace(/\\./g, '*');\r\n    const url = urlTemplate.replace('{userId}', userId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(url).once('value').then((snapshot) => {\r\n        resolve(mapResponse(snapshot));\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    })\r\n  }\r\n\r\n  addToOrderHistory(userId: string, order: CartType): Promise<UserDataType> {\r\n    const {url: urlTemplate } = apiConfig.addToOrderHistory;\r\n    const orderId = String(Date.now());\r\n    const url = urlTemplate.replace('{userId}', userId)\r\n                           .replace('{orderId}', orderId);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.database.ref(`${url}`).set(order, (error) => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n","import DatabaseHandler from '@api/databaseHandler';\r\nimport { getPizzasListAction } from './action-creators';\r\nimport { PizzasListType } from '@reducers/pizzas-reducer';\r\n\r\nconst databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n\r\nexport const getPizzasList = (): Function => {\r\n  return (dispatch) => {\r\n    databaseHandler.getPizzasList().then((data: PizzasListType) =>{\r\n      dispatch(getPizzasListAction(data));\r\n    }).catch((error) => {\r\n      console.log('Error: ', error);\r\n    });\r\n  }\r\n};","import { ActionObjectType } from '@actions/common';\r\nimport { GET_USER_DATA,\r\n         USER_NOT_FOUND,\r\n         USER_ALREADY_EXISTS,\r\n         CLEAR_FORMS_ERRORS\r\n} from '@actions/user';\r\n\r\nexport enum FORM_TYPES {\r\n  AUTH,\r\n  REG,\r\n}\r\n\r\nexport interface FormsStateType {\r\n  [key: FORM_TYPES]: {\r\n    error: string,\r\n  }\r\n}\r\n\r\nexport const defaultFormsData: FormsStateType = {\r\n  [FORM_TYPES.AUTH]: {\r\n    error: null,\r\n  },\r\n  [FORM_TYPES.REG]: {\r\n    error: null,\r\n  },\r\n}\r\n\r\nconst formReducer = (formsState = defaultFormsData, action: ActionObjectType): FormsStateType => {\r\n  switch (action.type) {\r\n    case GET_USER_DATA:\r\n      return {\r\n        ...formsState,\r\n        [FORM_TYPES.AUTH]: {\r\n          error: null,\r\n        }\r\n      };\r\n    case USER_NOT_FOUND:\r\n      return {\r\n        ...formsState,\r\n        [FORM_TYPES.AUTH]: {\r\n          error: 'E-mail or password does not match',\r\n        }\r\n      };\r\n    case USER_ALREADY_EXISTS:\r\n      return {\r\n        ...formsState,\r\n        [FORM_TYPES.REG]: {\r\n          error: 'Email is already registered',\r\n        }\r\n      };\r\n    case CLEAR_FORMS_ERRORS:\r\n      return {\r\n        ...defaultFormsData,\r\n      };\r\n    default:\r\n      return formsState;\r\n  }\r\n}\r\n\r\nexport default formReducer;","import { ActionObjectType } from '@actions/common';\r\nimport { GET_PIZZAS_LIST } from '@actions/pizzas';\r\nimport { CURRENCY_TYPES } from './session/session-reducer';\r\n\r\nexport interface PizzaType {\r\n  id: string,\r\n  name: string;\r\n  img: string;\r\n  ingredients: string;\r\n  price: { [key: CURRENCY_TYPES]: number };\r\n}\r\n\r\nexport type PizzasListType = {[key: string]: PizzaType};\r\n\r\nconst pizzasReducer = (pizzasList: PizzasListType = {}, action: ActionObjectType): PizzasListType => {\r\n  switch (action.type) {\r\n    case GET_PIZZAS_LIST:\r\n      return action.payload.pizzasList;\r\n    default:\r\n      return pizzasList;\r\n  }\r\n}\r\n\r\nexport default pizzasReducer;","export const GET_USER_DATA = 'GET_USER_DATA';\r\nexport const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const USER_NOT_FOUND = 'USER_NOT_FOUND';\r\nexport const USER_ALREADY_EXISTS = 'USER_ALREADY_EXISTS';\r\nexport const CLEAR_FORMS_ERRORS = 'CLEAR_FORMS_ERRORS';\r\n","import { ActionObjectType } from '../common/constants';\r\nimport {\r\n  GET_USER_DATA,\r\n  USER_NOT_FOUND,\r\n  USER_ALREADY_EXISTS,\r\n  CLEAR_FORMS_ERRORS,\r\n} from './constants';\r\nimport { UserDataType } from '@reducers/user-reducer';\r\n\r\nexport const getUserDataAction = (data: UserDataType): ActionObjectType => ({\r\n  type: GET_USER_DATA,\r\n  payload: {\r\n    user: data,\r\n  },\r\n});\r\n\r\nexport const userNotFoundAction = (): ActionObjectType => ({\r\n  type: USER_NOT_FOUND,\r\n});\r\n\r\nexport const userAlreadyExistsAction = (): ActionObjectType => ({\r\n  type: USER_ALREADY_EXISTS,\r\n});\r\n\r\nexport const clearFormsErrorsAction = (): ActionObjectType => ({\r\n  type: CLEAR_FORMS_ERRORS,\r\n});\r\n\r\n\r\n","import { ActionObjectType } from '@actions/common';\r\nimport { GET_USER_DATA, USER_NOT_FOUND } from '@actions/user';\r\n\r\nexport interface UserDataType {\r\n  id: string;\r\n}\r\n\r\nexport const defaultUserData: UserDataType = {\r\n  id: undefined,\r\n}\r\n\r\nconst userReducer = (userData = defaultUserData, action: ActionObjectType): UserDataType => {\r\n  switch (action.type) {\r\n    case GET_USER_DATA:\r\n      return {\r\n        ...userData,\r\n        ...action.payload.user,\r\n      };\r\n    case USER_NOT_FOUND:\r\n      return {\r\n        ...defaultUserData,\r\n      };\r\n    default:\r\n      return userData;\r\n  }\r\n}\r\n\r\nexport default userReducer;","import React, { memo } from 'react';\r\nimport './Title.scss';\r\n\r\nexport enum TITLE_SIZES {\r\n  SM = 'sm',\r\n  MD = 'md',\r\n  LG = 'lg',\r\n}\r\n\r\nexport interface TitleProps {\r\n  size?: TITLE_SIZES;\r\n  tag?: string;\r\n  className?: string;\r\n}\r\n\r\n\r\n/**\r\n * Title.\r\n *\r\n * @returns {JSX} - Title component.\r\n */\r\nconst Title = (props: TitleProps): JSX.Element => {\r\n  const { tag = 'p', size = 'md', className: classNameFromProps, children } = props;\r\n  const className = `${classNameFromProps ? `${classNameFromProps} `: ''}title title-${size}`;\r\n\r\n  return React.createElement(tag, { className }, children);\r\n}\r\n\r\nexport default memo(Title);\r\n","import { combineReducers } from 'redux';\r\nimport pizzasReducer from './pizzas-reducer';\r\nimport sessionReducer from './session-reducer';\r\nimport userReducer from './user-reducer';\r\nimport formReducer from './form-reducer';\r\n\r\nexport default combineReducers(\r\n  {\r\n    pizzas: pizzasReducer,\r\n    session: sessionReducer,\r\n    user: userReducer,\r\n    forms: formReducer,\r\n  }\r\n);","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React, { memo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Logo.scss';\r\n\r\n/**\r\n * Logo component.\r\n *\r\n * @returns {JSX} - logo component.\r\n */\r\nconst Logo = (): JSX.Element => {\r\n  return (\r\n    <Link to=\"/\" className=\"logo\">\r\n      Cool Pizzas store\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default memo(Logo);\r\n","import React, { memo } from 'react';\r\nimport { CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport './CurrencySign.scss';\r\n\r\nconst CURRENCY_CONTENT_BY_TYPE = {\r\n  [CURRENCY_TYPES.EURO]: '€',\r\n  [CURRENCY_TYPES.DOLLAR]: '$',\r\n}\r\n\r\n/**\r\n * Currency sign.\r\n *\r\n * @returns {JSX} - Currency sign component.\r\n */\r\nconst CurrencySign = (props: { type: CURRENCY_TYPES }): JSX.Element => {\r\n  const {type } = props;\r\n\r\n  return (\r\n    <span>\r\n      {CURRENCY_CONTENT_BY_TYPE[type]}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default memo(CurrencySign);\r\n","import React, { memo } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '@components/common/Logo/Logo';\r\nimport CurrencySign from '@components/common/CurrencySign/CurrencySign';\r\nimport { CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport { UserDataType } from '@reducers/user-reducer';\r\nimport './Header.scss';\r\n\r\nexport interface HeaderProps {\r\n  user: UserDataType;\r\n  cartItemsQty: number;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n  changeCurrency: Function;\r\n  openAuthModalHandler: Function;\r\n}\r\n\r\n/**\r\n * Main header.\r\n *\r\n * @returns {JSX} - header component.\r\n */\r\nconst Header = (props: HeaderProps): JSX.Element => {\r\n  const { user,\r\n          chosenCurrency,\r\n          cartItemsQty,\r\n          openAuthModalHandler,\r\n          changeCurrency } = props;\r\n  const isUserAuthorized = Boolean(user.id);\r\n\r\n  const handleCurrencyChange = (e: React.SyntheticEvent, currencyType: CURRENCY_TYPES): void => {\r\n    e.preventDefault();\r\n\r\n    if (chosenCurrency !== currencyType) {\r\n      changeCurrency(currencyType);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <Container>\r\n        <div className=\"header-content\">\r\n          <Logo />\r\n\r\n          <div className=\"currency-switch\">\r\n            <a href=\"#\"\r\n               className={`link${chosenCurrency === CURRENCY_TYPES.EURO ? ' disabled': ''}`}\r\n               role=\"button\"\r\n               onClick={(e) => {\r\n                 handleCurrencyChange(e, CURRENCY_TYPES.EURO);\r\n               }}>\r\n              <CurrencySign type={CURRENCY_TYPES.EURO} />\r\n            </a>\r\n            /\r\n            <a href=\"#\"\r\n               className={`link${chosenCurrency === CURRENCY_TYPES.DOLLAR ? ' disabled': ''}`}\r\n               role=\"button\"\r\n               onClick={(e) => {\r\n                 handleCurrencyChange(e, CURRENCY_TYPES.DOLLAR);\r\n               }}>\r\n              <CurrencySign type={CURRENCY_TYPES.DOLLAR} />\r\n            </a>\r\n          </div>\r\n\r\n          <nav className=\"nav\">\r\n            <ul className=\"nav-list\">\r\n              <li className=\"nav-list-item\">\r\n                {\r\n                  isUserAuthorized ?\r\n                    <Link to=\"order-history\" className=\"nav-link\">\r\n                      Order history\r\n                    </Link>\r\n                    :\r\n                    <a href=\"#\" className=\"nav-link\" onClick={openAuthModalHandler}>\r\n                      Sign in\r\n                    </a>\r\n                }\r\n              </li>\r\n              <li className=\"nav-list-item\">\r\n                <Link to=\"/checkout\" className=\"nav-link cart-link\">\r\n                  Cart\r\n                  {\r\n                    cartItemsQty > 0\r\n                    &&\r\n                    <span className=\"cart-qty\">\r\n                      { cartItemsQty }\r\n                    </span>\r\n                  }\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </Container>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default memo(Header);\r\n","import React, { memo } from 'react';\r\nimport './Footer.scss';\r\n\r\n/**\r\n * Main footer.\r\n *\r\n * @returns {JSX} - footer component.\r\n */\r\nconst Footer = (): JSX.Element => {\r\n\r\n  return (\r\n    <footer className=\"footer fixed-bottom\">\r\n      Cool pizzas store\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default memo(Footer);\r\n","import * as React from 'react';\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n  type?: string;\r\n}\r\n\r\n/**\r\n * Button component.\r\n *\r\n * @param {ButtonProps} - object with button`s parameters.\r\n * @returns {JSX} - button component.\r\n */\r\nconst Button = (props: ButtonProps): JSX.Element => {\r\n  const { onClick = null, children } = props;\r\n\r\n  return (\r\n    <button className=\"button\" onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './Input.scss';\r\n\r\ninterface InputProps {\r\n  name: string;\r\n  label?: string;\r\n  errorText?: string;\r\n  className?:string;\r\n  [key: string]: any;\r\n}\r\n\r\nconst defaultProps: Partial<InputProps> = {\r\n  type: 'text',\r\n}\r\n\r\n/**\r\n * Input component with label.\r\n *\r\n * @param {InputProps} - input`s parameters.\r\n * @returns {JSX} - input group container with input itself and a label.\r\n */\r\nconst Input = (props: InputProps): JSX.Element => {\r\n  const componentProps = { ...defaultProps, ...props };\r\n  const { label, errorText, className: classNameFromProps, ...attrs } = componentProps;\r\n  const className = `input-row${classNameFromProps ? ` ${classNameFromProps}`: ''}`;\r\n\r\n  return (\r\n    <div className={className}>\r\n      {\r\n        label\r\n        &&\r\n        <label className=\"input-label\">{label}</label>\r\n      }\r\n      <input className=\"input\" { ...attrs } />\r\n\r\n      {\r\n        Boolean(errorText)\r\n        &&\r\n        <div className=\"input-error\">{errorText}</div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport { PriceType } from '@reducers/session-reducer';\r\nimport { CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport './AbstractPizza.scss';\r\n\r\nexport interface AbstractPizzaProps {\r\n  id: number;\r\n  name: string;\r\n  img: string;\r\n  price: PriceType;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n  updateCartHandler: Function;\r\n}\r\n\r\n/**\r\n * Abstract class for single pizza item.\r\n *\r\n * @returns {JSX} - pizza component.\r\n */\r\nabstract class AbstractPizza<P extends AbstractPizzaProps> extends React.PureComponent<P> {\r\n  constructor(props: AbstractPizzaProps) {\r\n    super(props);\r\n\r\n    this.handleQtyChange = this.handleQtyChange.bind(this);\r\n    this.handleAddToCart = this.handleAddToCart.bind(this);\r\n  }\r\n\r\n  handleQtyChange(e: React.SyntheticEvent<HTMLInputElement>): void {\r\n    const { id, updateCartHandler } = this.props;\r\n    const newQty = Number(e.currentTarget?.value);\r\n\r\n    if (newQty >= 0) {\r\n      updateCartHandler(id, newQty);\r\n    }\r\n  }\r\n\r\n  handleAddToCart(): void {\r\n    const { id, updateCartHandler } = this.props;\r\n\r\n    updateCartHandler(id, 1);\r\n  }\r\n}\r\n\r\nexport default AbstractPizza;\r\n","import React from 'react';\r\nimport Button from '@components/common/Button/Button';\r\nimport Input from '@components/common/Input/Input';\r\nimport { AbstractPizzaProps } from '@components/abstract/AbstractPizza/AbstractPizza';\r\nimport AbstractPizza from '@components/abstract/AbstractPizza/AbstractPizza';\r\nimport CurrencySign from '@components/common/CurrencySign/CurrencySign';\r\nimport './Pizza.scss';\r\n\r\ninterface PizzaProps extends AbstractPizzaProps {\r\n  ingredients: string;\r\n  isInCart: boolean;\r\n  qty?: number;\r\n}\r\n\r\n/**\r\n * Class for single pizza item.\r\n *\r\n * @returns {JSX} - pizza component.\r\n */\r\nclass Pizza extends AbstractPizza<PizzaProps> {\r\n  render(): JSX.Element {\r\n    const {\r\n      name,\r\n      price,\r\n      img,\r\n      isInCart,\r\n      cartQty,\r\n      chosenCurrency,\r\n    } = this.props;\r\n\r\n    return (\r\n      <article className=\"pizza\">\r\n        <p className=\"pizza-title\">\r\n          { name }\r\n        </p>\r\n        <div className=\"pizza-img-wrapper\">\r\n          <img className=\"pizza-img\" src={img} alt={name} />\r\n        </div>\r\n        <p className=\"pizza-price\">\r\n          { price[chosenCurrency] } <CurrencySign type={chosenCurrency} />\r\n        </p>\r\n        {\r\n          isInCart ?\r\n            <Input className=\"pizza-qty-input\"\r\n                   name=\"qty\"\r\n                   type=\"number\"\r\n                   min=\"0\"\r\n                   defaultValue={cartQty}\r\n                   onChange={this.handleQtyChange} />\r\n            :\r\n            <Button className=\"pizza-button\" onClick={this.handleAddToCart}>\r\n              Add\r\n            </Button>\r\n        }\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pizza;\r\n","import React from 'react';\r\nimport { PizzasListType } from '@reducers/pizzas-reducer';\r\nimport { CURRENCY_TYPES, PriceType, CartType } from '@reducers/session-reducer';\r\nimport { createPriceObj } from '@helpers';\r\nimport './AbstractPizzasList.scss';\r\n\r\nexport interface AbstractPizzasListProps {\r\n  pizzas: PizzasListType;\r\n  cart?: CartType;\r\n  noCartAction?: boolean;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n  updateCart?: Function;\r\n}\r\n\r\n/**\r\n * Abstract class for pizza list.\r\n *\r\n * @returns {JSX} - pizzas list component.\r\n */\r\nabstract class AbstractPizzasList<P extends AbstractPizzasListProps> extends React.PureComponent<P> {\r\n  constructor(props: AbstractPizzasListProps) {\r\n    super(props);\r\n\r\n    this.updateCart = this.updateCart.bind(this);\r\n  }\r\n\r\n  updateCart(pizzaId: number, newQty: number): void {\r\n    const { cart, pizzas, updateCart: dispatchUpdateCart } = this.props;\r\n    const updatedCart = { ...cart } as CartType;\r\n\r\n    if (newQty === 0) {\r\n      delete updatedCart.items?.[pizzaId];\r\n    } else {\r\n      const updatedPizza = pizzas[pizzaId];\r\n\r\n      updatedCart.items = {\r\n        ...updatedCart?.items,\r\n        [pizzaId]: {\r\n          ...updatedPizza,\r\n          qty: newQty,\r\n          totalPrice: createPriceObj(\r\n            Number(updatedPizza.price[CURRENCY_TYPES.EURO]) * newQty,\r\n            Number(updatedPizza.price[CURRENCY_TYPES.DOLLAR]) * newQty,\r\n          ),\r\n        }\r\n      }\r\n    }\r\n\r\n    const { qty: totalQty, price: totalPrice } = this.getTotals({ ...updatedCart.items });\r\n    const newCart = {\r\n      ...updatedCart,\r\n      totalQty,\r\n      totalPrice,\r\n    };\r\n\r\n    dispatchUpdateCart(newCart);\r\n  }\r\n\r\n  getTotals(cartItems: PizzasListType): { qty: number, price: PriceType } {\r\n    const itemsKeys = Object.keys(cartItems);\r\n    let initialTotals = {\r\n      qty: 0,\r\n      price: createPriceObj(0, 0),\r\n    };\r\n    const totals = itemsKeys.reduce((totals, itemKey) => {\r\n      const itemQty = Number(cartItems[itemKey].qty);\r\n      const { [CURRENCY_TYPES.EURO]: itemEuroPrice,\r\n              [CURRENCY_TYPES.DOLLAR]: itemDollarPrice } = cartItems[itemKey].price;\r\n\r\n      return {\r\n        qty: totals.qty + itemQty,\r\n        price: createPriceObj(\r\n          totals.price[CURRENCY_TYPES.EURO] + (itemEuroPrice * itemQty),\r\n          totals.price[CURRENCY_TYPES.DOLLAR] + (itemDollarPrice * itemQty),\r\n        )\r\n      }\r\n    }, initialTotals);\r\n\r\n    return totals;\r\n  }\r\n}\r\n\r\nexport default AbstractPizzasList;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Pizza from './Pizza/Pizza';\r\nimport AbstractPizzasList, { AbstractPizzasListProps } from '../abstract/AbstractPizzasList/AbstractPizzasList';\r\nimport './PizzasList.scss';\r\n\r\ninterface PizzasListProps extends AbstractPizzasListProps {\r\n  getPizzasList: Function;\r\n}\r\n\r\n/**\r\n * Class for pizza list.\r\n *\r\n * @returns {JSX} - pizzas list component.\r\n */\r\nclass PizzasList extends AbstractPizzasList<PizzasListProps> {\r\n  componentDidMount() {\r\n    const { getPizzasList } = this.props;\r\n\r\n    if (getPizzasList) {\r\n      getPizzasList();\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { pizzas, cart, chosenCurrency } = this.props;\r\n    const pizzasIds = Object.keys(pizzas);\r\n    const pizzasInCart = cart?.items;\r\n\r\n    return (\r\n      <>\r\n        {\r\n          Boolean(pizzasIds?.length > 0)\r\n          &&\r\n          <Row className=\"pizzas-list\">\r\n            {\r\n              pizzasIds.map((pizzaId) => {\r\n                const isInCart = Boolean(pizzasInCart?.[pizzaId]);\r\n                const cartQty = isInCart ? pizzasInCart?.[pizzaId].qty : 0;\r\n                const pizzaProps = {\r\n                  ...pizzas[pizzaId],\r\n                  isInCart,\r\n                  cartQty,\r\n                };\r\n\r\n                return (\r\n                  <Col className=\"pizzas-list-item\" sm={4} xs={12} key={pizzaId}>\r\n                    <Pizza {...pizzaProps}\r\n                           chosenCurrency={chosenCurrency}\r\n                           updateCartHandler={this.updateCart}/>\r\n                  </Col>\r\n                )\r\n              })\r\n            }\r\n          </Row>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PizzasList;\r\n","import DatabaseHandler from '@api/databaseHandler';\r\nimport { getSessionDataAction } from '@actions/session/action-creators';\r\nimport { CartType } from '@reducers/session-reducer';\r\nimport CookieHandler from '../../utils/cookie/cookieHandler';\r\n\r\nconst databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n\r\nexport const updateCart = (newCart: CartType): Function => {\r\n  return (dispatch) => {\r\n    const sessionId = CookieHandler.getSessionId();\r\n    databaseHandler.updateCart(sessionId, newCart).then((data) => {\r\n      dispatch(getSessionDataAction(data));\r\n    }).catch((error) => {\r\n      console.log('Error: ', error);\r\n    });\r\n  }\r\n};","import { connect } from 'react-redux';\r\nimport PizzasList from '@components/PizzasList/PizzasList';\r\nimport { getPizzasList } from '@actions/pizzas';\r\nimport { updateCart } from '@actions/cart/thunks';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    pizzas: state.pizzas,\r\n    cart: state.session.cart,\r\n    chosenCurrency: state.session.currency,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    getPizzasList,\r\n    updateCart,\r\n  }\r\n  )(PizzasList);\r\n","import { ActionObjectType } from '../common/constants';\r\nimport { GET_PIZZAS_LIST } from './constants';\r\nimport { PizzasListType } from '@reducers/pizzas-reducer';\r\n\r\nexport const getPizzasListAction = (data: PizzasListType): ActionObjectType => ({\r\n  type: GET_PIZZAS_LIST,\r\n  payload: {\r\n    pizzasList: data,\r\n  },\r\n});","import React, { memo, useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport AuthFormContainer from '@containers/AuthFormContainer';\r\nimport RegFormContainer from '@containers/RegFormContainer';\r\nimport './AuthRegModal.scss';\r\n\r\nexport enum FORM_TYPES {\r\n  AUTH,\r\n  REG,\r\n}\r\n\r\n/**\r\n * Authorization and registration modal.\r\n *\r\n * @returns {JSX} - modal component.\r\n */\r\nconst AuthRegModal = (props): JSX.Element => {\r\n  const { isModalOpen, onHideHandler } = props;\r\n  const [ activeForm, setActiveForm ] = useState(FORM_TYPES.AUTH);\r\n\r\n  const toggleActiveForm = (): void => {\r\n    if (activeForm === FORM_TYPES.AUTH) {\r\n      setActiveForm(FORM_TYPES.REG);\r\n    } else {\r\n      setActiveForm(FORM_TYPES.AUTH);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal className=\"auth-modal\"\r\n           show={isModalOpen}\r\n           onHide={onHideHandler}\r\n           centered>\r\n      {\r\n        activeForm === FORM_TYPES.AUTH ?\r\n          <AuthFormContainer />\r\n          :\r\n          <RegFormContainer />\r\n      }\r\n\r\n      <p className=\"form-type-toggle\">\r\n        {\r\n          activeForm === FORM_TYPES.AUTH ?\r\n            <>\r\n              Not registered yet? <a href=\"#\" className=\"link\" onClick={toggleActiveForm}>Sign up</a>\r\n            </>\r\n            :\r\n            <>\r\n              Already have an account? <a href=\"#\" className=\"link\" onClick={toggleActiveForm}>Sign in</a>\r\n            </>\r\n        }\r\n      </p>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default memo(AuthRegModal);\r\n","import React, { memo } from 'react';\r\nimport PizzasListContainer from '@containers/PizzasListContainer';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\n\r\n/**\r\n * Main page.\r\n *\r\n * @returns {JSX} - main page component.\r\n */\r\nconst MainPage = (): JSX.Element => {\r\n  return (\r\n    <section>\r\n      <Title tag=\"h1\" size={TITLE_SIZES.LG}>\r\n        Choose one of our cool pizzas\r\n      </Title>\r\n      <PizzasListContainer />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default memo(MainPage);\r\n","import React from 'react';\r\nimport Button from '@components/common/Button/Button';\r\nimport Input from '@components/common/Input/Input';\r\nimport { AbstractPizzaProps } from '@components/abstract/AbstractPizza/AbstractPizza';\r\nimport AbstractPizza from '@components/abstract/AbstractPizza/AbstractPizza';\r\nimport CurrencySign from '@components/common/CurrencySign/CurrencySign';\r\nimport './OrderedPizza.scss';\r\n\r\n/**\r\n * Class for single pizza item in order.\r\n *\r\n * @returns {JSX} - pizza component.\r\n */\r\nclass OrderedPizza extends AbstractPizza<AbstractPizzaProps> {\r\n  render(): JSX.Element {\r\n    const {\r\n      name,\r\n      price,\r\n      isInCart,\r\n      cartQty,\r\n      chosenCurrency,\r\n      noCartAction,\r\n    } = this.props;\r\n\r\n    return (\r\n      <article className=\"pizza ordered-pizza\">\r\n        <p className=\"pizza-title\">\r\n          {name}\r\n        </p>\r\n        <div className=\"pizza-details\">\r\n          <div className=\"pizza-img-wrapper\">\r\n            <img className=\"pizza-img\" src=\"assets/img/pizza1.jpg\" alt={name}/>\r\n          </div>\r\n          <p className=\"pizza-price\">\r\n            { price[chosenCurrency] } <CurrencySign type={chosenCurrency} />\r\n          </p>\r\n          {\r\n            !noCartAction\r\n            ?\r\n              (\r\n                isInCart ?\r\n                <Input className=\"pizza-qty-input\"\r\n                       name=\"qty\"\r\n                       type=\"number\"\r\n                       min=\"0\"\r\n                       defaultValue={cartQty}\r\n                       onChange={this.handleQtyChange}/>\r\n                :\r\n                <Button className=\"pizza-button\" onClick={this.handleAddToCart}>\r\n                  Add\r\n                </Button>\r\n              )\r\n              :\r\n              (\r\n                <p className=\"pizza-qty\">\r\n                  Amount: { cartQty }\r\n                </p>\r\n              )\r\n          }\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OrderedPizza;\r\n","import React from 'react';\r\nimport AbstractPizzasList, { AbstractPizzasListProps } from '../abstract/AbstractPizzasList/AbstractPizzasList';\r\nimport './PizzasOrderList.scss';\r\nimport OrderedPizza from './OrderedPizza/OrderedPizza';\r\n\r\ninterface PizzasOrderListProps extends AbstractPizzasListProps {}\r\n\r\n/**\r\n * Class for ordered pizza list.\r\n *\r\n * @returns {JSX} - pizzas list component.\r\n */\r\nclass PizzasOrderList extends AbstractPizzasList<PizzasOrderListProps> {\r\n  render(): JSX.Element {\r\n    const { pizzas, chosenCurrency, noCartAction } = this.props;\r\n\r\n    if (!pizzas) return null;\r\n\r\n    const pizzasIds = Object.keys(pizzas);\r\n\r\n    return (\r\n      <>\r\n        {\r\n          Boolean(pizzasIds?.length > 0)\r\n          &&\r\n          pizzasIds.map((pizzaId) => {\r\n            const pizzaProps = {\r\n              ...pizzas[pizzaId],\r\n              isInCart: true,\r\n              cartQty: pizzas[pizzaId].qty,\r\n            };\r\n\r\n            return (\r\n                <OrderedPizza {...pizzaProps}\r\n                              chosenCurrency={chosenCurrency}\r\n                              noCartAction={noCartAction}\r\n                              updateCartHandler={this.updateCart} />\r\n            )\r\n          })\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PizzasOrderList;\r\n","import React, { memo } from 'react';\r\nimport { CartType } from '@reducers/session-reducer';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\nimport { CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport './Totals.scss';\r\nimport CurrencySign from '../../common/CurrencySign/CurrencySign';\r\n\r\ninterface TotalsProps {\r\n  cart: CartType;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n}\r\n\r\n/**\r\n * Totals or order.\r\n *\r\n * @returns {JSX} - order component.\r\n */\r\nconst Totals = (props: TotalsProps): JSX.Element => {\r\n  const {\r\n    cart,\r\n    chosenCurrency,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <Title size={TITLE_SIZES.SM}>Total:</Title>\r\n      <p className=\"totals-text\">\r\n        Items in cart: {cart.totalQty}\r\n      </p>\r\n      <p className=\"totals-text\">\r\n         Price: {cart.totalPrice[chosenCurrency]} <CurrencySign type={chosenCurrency} />\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Totals);\r\n","import React, { memo } from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { CartType, CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport PizzasOrderList from '../PizzasOrderList/PizzasOrderList';\r\nimport Totals from './Totals/Totals';\r\nimport './Order.scss';\r\n\r\ninterface OrderProps {\r\n  cart: CartType;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n  noCartAction?: boolean;\r\n  updateCart?: Function;\r\n}\r\n\r\n/**\r\n * Order with pizza list and totals.\r\n *\r\n * @returns {JSX} - order component.\r\n */\r\nconst Order = (props: OrderProps): JSX.Element => {\r\n  const {\r\n    cart,\r\n    chosenCurrency,\r\n    noCartAction,\r\n    updateCart,\r\n  } = props;\r\n\r\n  if (!cart) return null;\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"order\">\r\n        <Col sm={8} xs={12}>\r\n          <PizzasOrderList cart={cart}\r\n                           pizzas={cart.items}\r\n                           chosenCurrency={chosenCurrency}\r\n                           noCartAction={noCartAction}\r\n                           updateCart={updateCart} />\r\n        </Col>\r\n        <Col sm={4} xs={12}>\r\n          <Totals cart={cart} chosenCurrency={chosenCurrency} />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Order);\r\n","import { connect } from 'react-redux';\r\nimport { updateCart } from '@actions/cart/thunks';\r\nimport Order from '@components/Order/Order';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cart: state.session.cart,\r\n    chosenCurrency: state.session.currency,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    updateCart,\r\n  }\r\n  )(Order);\r\n","import React from 'react';\r\nimport { PriceType } from '@reducers/session-reducer';\r\nimport './AbstractForm.scss';\r\n\r\nexport interface AbstractFormProps {\r\n  id: number;\r\n  name: string;\r\n  img: string,\r\n  price: PriceType;\r\n  updateCartHandler: Function;\r\n}\r\n\r\n/**\r\n * Abstract class for single pizza item.\r\n *\r\n * @returns {JSX} - pizza component.\r\n */\r\nabstract class AbstractForm<P extends AbstractFormProps> extends React.PureComponent<P> {\r\n  protected fieldsValidationRules: { [key: string]: Function };\r\n\r\n  constructor(props: AbstractFormProps) {\r\n    super(props);\r\n\r\n    this.handleValueChange = this.handleValueChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n    this.sendForm = this.sendForm.bind(this);\r\n  }\r\n\r\n  abstract sendForm(): void;\r\n\r\n  handleValueChange(e: React.SyntheticEvent<HTMLInputElement>): void {\r\n    const valueKey = e.currentTarget?.name;\r\n    const { [valueKey]: field } = this.state.fields;\r\n    const newValue = e.currentTarget?.value;\r\n    const prevValue = field.value;\r\n\r\n    if (newValue !== prevValue) {\r\n      this.setState({\r\n        fields: {\r\n          ...this.state.fields,\r\n          [valueKey]: {\r\n            ...field,\r\n            value: newValue,\r\n            errorText: '',\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSubmit(e: React.SyntheticEvent): void {\r\n    e.preventDefault();\r\n    this.validateForm(this.sendForm);\r\n  }\r\n\r\n  validateForm(onSuccessCallback?: Function): void {\r\n    const { fields } = this.state;\r\n    const validatedFields = {};\r\n    let hasErrors = false;\r\n\r\n    for (const key in fields) {\r\n      const validationRule = this.fieldsValidationRules[key];\r\n\r\n      if (validationRule) {\r\n        const errorText = validationRule(fields[key].value);\r\n\r\n        validatedFields[key] = {\r\n          ...fields[key],\r\n          errorText,\r\n        };\r\n\r\n        if (!hasErrors) {\r\n          hasErrors = Boolean(errorText);\r\n        }\r\n      }\r\n    }\r\n\r\n    const updatedFields = {\r\n      fields: {\r\n        ...fields,\r\n        ...validatedFields,\r\n      }\r\n    };\r\n\r\n    this.setState({\r\n      fields: {\r\n        ...fields,\r\n        ...validatedFields,\r\n      }\r\n    });\r\n\r\n    if (!hasErrors && onSuccessCallback) {\r\n      onSuccessCallback();\r\n    }\r\n  }\r\n}\r\n\r\nexport default AbstractForm;\r\n","export const NAME_RESTRICTIONS = {\r\n  MIN_SYMBOLS_COUNT: 2,\r\n  MAX_SYMBOLS_COUNT: 30,\r\n  REG_EXP: /[a-zA-Z]+[\\s\\-]*[a-zA-Z]+/i,\r\n}\r\n\r\nexport const SURNAME_RESTRICTIONS = {\r\n  MIN_SYMBOLS_COUNT: 2,\r\n  MAX_SYMBOLS_COUNT: 30,\r\n  REG_EXP: /[a-zA-Z]+[\\s\\-]*[a-zA-Z]+/i,\r\n}\r\n\r\nexport const EMAIL_RESTRICTIONS = {\r\n  REG_EXP: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/i,\r\n}\r\n\r\nexport const PASSWORD_RESTRICTIONS = {\r\n  MIN_SYMBOLS_COUNT: 6,\r\n  MAX_SYMBOLS_COUNT: 30,\r\n}","import {\r\n  EMAIL_RESTRICTIONS,\r\n  NAME_RESTRICTIONS,\r\n  PASSWORD_RESTRICTIONS,\r\n  SURNAME_RESTRICTIONS\r\n} from './constants';\r\n\r\nexport const nameValidation = {\r\n  minLength: value => value?.length >= NAME_RESTRICTIONS.MIN_SYMBOLS_COUNT,\r\n  maxLength: value => value?.length < NAME_RESTRICTIONS.MAX_SYMBOLS_COUNT,\r\n  regExp: value => NAME_RESTRICTIONS.REG_EXP.test(value),\r\n}\r\n\r\nexport const surnameValidation = {\r\n  minLength: value => value?.length >= SURNAME_RESTRICTIONS.MIN_SYMBOLS_COUNT,\r\n  maxLength: value => value?.length < SURNAME_RESTRICTIONS.MAX_SYMBOLS_COUNT,\r\n  regExp: value => SURNAME_RESTRICTIONS.REG_EXP.test(value),\r\n}\r\n\r\nexport const emailValidation = {\r\n  regExp: value => EMAIL_RESTRICTIONS.REG_EXP.test(value),\r\n}\r\n\r\nexport const passwordValidation = {\r\n  minLength: value => value?.length >= PASSWORD_RESTRICTIONS.MIN_SYMBOLS_COUNT,\r\n  maxLength: value => value?.length < PASSWORD_RESTRICTIONS.MAX_SYMBOLS_COUNT,\r\n}\r\n","import {\r\n  NAME_RESTRICTIONS,\r\n  PASSWORD_RESTRICTIONS, SURNAME_RESTRICTIONS\r\n} from './constants';\r\nimport {\r\n  emailValidation, nameValidation,\r\n  passwordValidation, surnameValidation\r\n} from './rules';\r\n\r\nexport default class Validator {\r\n  private constructor() {}\r\n\r\n  static getNameError(value: string): string {\r\n    if (!nameValidation.minLength(value)) {\r\n      return `Name must contain at least ${NAME_RESTRICTIONS.MIN_SYMBOLS_COUNT} symbol`;\r\n    }\r\n    if (!nameValidation.maxLength(value)) {\r\n      return `Name must contain ${NAME_RESTRICTIONS.MAX_SYMBOLS_COUNT} maximum symbols amount`;\r\n    }\r\n    if (!nameValidation.regExp(value)) {\r\n      return 'Please enter a valid name with alphabet symbols only';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  static getSurnameError(value: string): string {\r\n    if (!surnameValidation.minLength(value)) {\r\n      return `Surname must contain at least ${SURNAME_RESTRICTIONS.MIN_SYMBOLS_COUNT} symbol`;\r\n    }\r\n    if (!surnameValidation.maxLength(value)) {\r\n      return `Surname must contain ${SURNAME_RESTRICTIONS.MAX_SYMBOLS_COUNT} maximum symbols amount`;\r\n    }\r\n    if (!(surnameValidation.regExp(value))) {\r\n      return 'Please enter a valid surname with alphabet symbols only';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  static getEmailError(value: string): string {\r\n    if (!emailValidation.regExp(value)) {\r\n      return 'Please enter a valid e-mail address';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  static getRegistrationPasswordError(value: string): string {\r\n    if (!passwordValidation.minLength(value)) {\r\n      return `Password must contain at least ${PASSWORD_RESTRICTIONS.MIN_SYMBOLS_COUNT} symbols`;\r\n    }\r\n    if (!passwordValidation.maxLength(value)) {\r\n      return `Password must contain ${PASSWORD_RESTRICTIONS.MAX_SYMBOLS_COUNT} maximum symbols amount`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  static getAuthPasswordError(value: string): string {\r\n    if (!value || value.length === 0) {\r\n      return `Password is required`;\r\n    }\r\n    if (!passwordValidation.minLength(value)) {\r\n      return `Password must contain at least ${PASSWORD_RESTRICTIONS.MIN_SYMBOLS_COUNT} symbols`;\r\n    }\r\n    return '';\r\n  }\r\n}","import React from 'react';\r\nimport Button from '@components/common/Button/Button';\r\nimport Input from '@components/common/Input/Input';\r\nimport AbstractForm, { AbstractFormProps } from '@components/abstract/AbstractForm/AbstractForm';\r\nimport Validator from '@utils/validator/validator';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\n\r\n/**\r\n * Class checkout form.\r\n *\r\n * @returns {JSX} - form component.\r\n */\r\nclass CheckoutForm extends AbstractForm<AbstractFormProps> {\r\n  constructor(props: AbstractFormProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      fields: {\r\n        name: {\r\n          label: 'Name:',\r\n          errorText: '',\r\n        },\r\n        surname: {\r\n          label: 'Surname:',\r\n          errorText: '',\r\n        },\r\n        address: {\r\n          label: 'Address:',\r\n          type: 'text',\r\n          errorText: '',\r\n        },\r\n        email: {\r\n          label: 'E-mail:',\r\n          errorText: '',\r\n        },\r\n      }\r\n    };\r\n    this.fieldsValidationRules = {\r\n      name: Validator.getNameError,\r\n      surname: Validator.getSurnameError,\r\n      email: Validator.getEmailError,\r\n      address: Validator.getAddressError,\r\n    }\r\n  }\r\n\r\n  sendForm(): void {\r\n    const { user, cart, addToOrderHistory } = this.props;\r\n    const userId = user?.id;\r\n\r\n    if (userId) {\r\n      addToOrderHistory(userId, cart);\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { user, cart } = this.props;\r\n    const { fields } = this.state;\r\n    const fieldsKeys = Object.keys(fields);\r\n    const isUserAuthorized = user?.id;\r\n    const hasItemsInCart = Boolean(cart.items?.length);\r\n\r\n    if (!hasItemsInCart) return (\r\n      <Title size={TITLE_SIZES.MD}>\r\n        No items in cart\r\n      </Title>\r\n    );\r\n\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        {\r\n          fieldsKeys.map((key) => {\r\n            const fieldProps = fields[key];\r\n            const defaultValue = isUserAuthorized ? user[key] : '';\r\n\r\n            return (\r\n              <Input name={key}\r\n                     key={key}\r\n                     { ...fieldProps}\r\n                     defaultValue={defaultValue}\r\n                     onChange={this.handleValueChange} />\r\n            )\r\n          })\r\n        }\r\n\r\n        <Button type=\"submit\">Checkout</Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CheckoutForm;\r\n","import { connect } from 'react-redux';\r\nimport { addToOrderHistory } from '@actions/user/thunks';\r\nimport CheckoutForm from '@components/forms/CheckoutForm/CheckoutForm';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    cart: state.session.cart,\r\n    chosenCurrency: state.session.currency,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    addToOrderHistory,\r\n  }\r\n  )(CheckoutForm);\r\n","import DatabaseHandler from '@api/databaseHandler';\r\nimport {\r\n  getUserDataAction,\r\n  userNotFoundAction,\r\n  userAlreadyExistsAction,\r\n  clearFormsErrorsAction,\r\n} from './action-creators';\r\nimport {UserDataType} from '@reducers/user-reducer';\r\nimport CookieHandler from '@utils/cookie/cookieHandler';\r\nimport {CartType} from '../../reducers/session-reducer';\r\n\r\nexport const authorizeUser = (email: string, password: string): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n\r\n    dispatch(clearFormsErrorsAction());\r\n\r\n    databaseHandler.authorizeAndGetUserData(email, password).then((data: UserDataType) => {\r\n      if (data?.id) {\r\n        CookieHandler.setUserId(data.id);\r\n        dispatch(getUserDataAction(data));\r\n      } else {\r\n        dispatch(userNotFoundAction());\r\n      }\r\n    }).catch((error) => {\r\n      console.log('Error: ', error);\r\n    });\r\n  };\r\n};\r\n\r\nexport const registerUser = (email: string, password: string, name: string, surname: string): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n\r\n    dispatch(clearFormsErrorsAction());\r\n\r\n    databaseHandler.checkIfUserExists(email).then((isExists: Boolean) => {\r\n      if (!isExists) {\r\n        databaseHandler.setUserData(email, password, name, surname).then((data: string) => {\r\n          CookieHandler.setUserId(data);\r\n          dispatch(getUserDataAction({id: data, email, password, name, surname}));\r\n        }).catch((error) => {\r\n          console.log('Error: ', error);\r\n        });\r\n      } else {\r\n        dispatch(userAlreadyExistsAction());\r\n      }\r\n    }).catch((error) => {\r\n      console.log('Error: ', error);\r\n    });\r\n  };\r\n};\r\n\r\nexport const getUserData = (): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n    const userId = CookieHandler.getUserId();\r\n\r\n    if (Boolean(userId)) {\r\n      databaseHandler.getUserData(userId).then((data: UserDataType) => {\r\n        if (data?.id) {\r\n          CookieHandler.setUserId(data.id);\r\n          dispatch(getUserDataAction(data));\r\n        }\r\n      }).catch((error) => {\r\n        console.log('Error: ', error);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const addToOrderHistory = (userId: string, order: CartType): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n    const userId = CookieHandler.getUserId();\r\n\r\n    databaseHandler.addToOrderHistory(userId, order).then(() => {\r\n      databaseHandler.getUserData(userId).then((data: UserDataType) => {\r\n        if (data?.id) {\r\n          dispatch(getUserDataAction(data));\r\n        }\r\n      }).catch((error) => {\r\n        console.log('Error: ', error);\r\n      });\r\n    }).catch((error) => {\r\n      console.log('Error: ', error);\r\n    });\r\n  };\r\n};","import React, { memo } from 'react';\r\nimport OrderContainer from '@containers/OrderContainer';\r\nimport CheckoutFormContainer from '@containers/CheckoutFormContainer';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\n\r\n/**\r\n * Checkout page.\r\n *\r\n * @returns {JSX} - checkout page component.\r\n */\r\nconst CheckoutPage = (): JSX.Element => {\r\n  return (\r\n    <section>\r\n      <Title tag=\"h1\" size={TITLE_SIZES.LG}>\r\n        Your order\r\n      </Title>\r\n      <CheckoutFormContainer />\r\n      <OrderContainer />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default memo(CheckoutPage);\r\n","import React from 'react';\r\nimport Button from '@components/common/Button/Button';\r\nimport Input from '@components/common/Input/Input';\r\nimport AbstractForm, { AbstractFormProps } from '@components/abstract/AbstractForm/AbstractForm';\r\nimport Validator from '@utils/validator/validator';\r\n\r\n/**\r\n * Class authorization form.\r\n *\r\n * @returns {JSX} - form component.\r\n */\r\nclass AuthForm extends AbstractForm<AbstractFormProps> {\r\n  constructor(props: AbstractFormProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      fields: {\r\n        email: {\r\n          label: 'E-mail:',\r\n          value: '',\r\n          errorText: '',\r\n        },\r\n        password: {\r\n          label: 'Password:',\r\n          value: '',\r\n          type: 'password',\r\n          errorText: '',\r\n        }\r\n      }\r\n    };\r\n    this.fieldsValidationRules = {\r\n      email: Validator.getEmailError,\r\n      password: Validator.getAuthPasswordError,\r\n    }\r\n\r\n    this.sendForm = this.sendForm.bind(this);\r\n  }\r\n\r\n  sendForm(): void {\r\n    const { authorizeUser } = this.props;\r\n    const { fields: { email, password } } = this.state;\r\n    const emailValue = email.value?.toLowerCase();\r\n\r\n    authorizeUser(emailValue, password.value);\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { formState } = this.props;\r\n    const { fields } = this.state;\r\n    const fieldsKeys = Object.keys(fields);\r\n\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        {\r\n          fieldsKeys.map((key) => {\r\n            const fieldProps = fields[key];\r\n\r\n            return (\r\n              <Input name={key}\r\n                     key={key}\r\n                     { ...fieldProps}\r\n                     onChange={this.handleValueChange} />\r\n            )\r\n          })\r\n        }\r\n\r\n        {\r\n          Boolean(formState?.error)\r\n          &&\r\n          <p className=\"form-error\">\r\n            {formState.error}\r\n          </p>\r\n        }\r\n\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AuthForm;\r\n","import { connect } from 'react-redux';\r\nimport { authorizeUser } from '@actions/user/thunks';\r\nimport { FORM_TYPES } from '@reducers/form-reducer';\r\nimport AuthForm from '@components/forms/AuthForm/AuthForm';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    formState: state.forms[FORM_TYPES.AUTH],\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    authorizeUser,\r\n  }\r\n  )(AuthForm);\r\n","import React from 'react';\r\nimport Button from '@components/common/Button/Button';\r\nimport Input from '@components/common/Input/Input';\r\nimport AbstractForm, { AbstractFormProps } from '@components/abstract/AbstractForm/AbstractForm';\r\nimport Validator from '@utils/validator/validator';\r\n\r\n/**\r\n * Class registration form.\r\n *\r\n * @returns {JSX} - form component.\r\n */\r\nclass RegForm extends AbstractForm<AbstractFormProps> {\r\n  constructor(props: AbstractFormProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      fields: {\r\n        name: {\r\n          label: 'Name:',\r\n          value: '',\r\n          errorText: '',\r\n        },\r\n        surname: {\r\n          label: 'Surname:',\r\n          value: '',\r\n          errorText: '',\r\n        },\r\n        email: {\r\n          label: 'E-mail:',\r\n          value: '',\r\n          errorText: '',\r\n        },\r\n        password: {\r\n          label: 'Password:',\r\n          value: '',\r\n          type: 'password',\r\n          errorText: '',\r\n        }\r\n      }\r\n    };\r\n    this.fieldsValidationRules = {\r\n      name: Validator.getNameError,\r\n      surname: Validator.getSurnameError,\r\n      email: Validator.getEmailError,\r\n      password: Validator.getRegistrationPasswordError,\r\n    }\r\n  }\r\n\r\n  sendForm(): void {\r\n    const { registerUser } = this.props;\r\n    const { fields: { email, password, name, surname } } = this.state;\r\n    const emailValue = email.value?.toLowerCase();\r\n\r\n    registerUser(\r\n      emailValue,\r\n      password.value,\r\n      name.value,\r\n      surname.value,\r\n    );\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const { formState } = this.props;\r\n    const { fields } = this.state;\r\n    const fieldsKeys = Object.keys(fields);\r\n\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handleSubmit}>\r\n        {\r\n          fieldsKeys.map((key) => {\r\n            const fieldProps = fields[key];\r\n\r\n            return (\r\n              <Input name={key}\r\n                     key={key}\r\n                     { ...fieldProps}\r\n                     onChange={this.handleValueChange} />\r\n            )\r\n          })\r\n        }\r\n\r\n        {\r\n          Boolean(formState?.error)\r\n          &&\r\n          <p className=\"form-error\">\r\n            {formState.error}\r\n          </p>\r\n        }\r\n\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegForm;\r\n","import { connect } from 'react-redux';\r\nimport { registerUser } from '@actions/user/thunks';\r\nimport { FORM_TYPES } from '@reducers/form-reducer';\r\nimport RegForm from '@components/forms/RegForm/RegForm';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    formState: state.forms[FORM_TYPES.REG],\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    registerUser,\r\n  }\r\n  )(RegForm);\r\n","import React, { memo } from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { CartType, CURRENCY_TYPES } from '@reducers/session-reducer';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\nimport Order from '../Order/Order';\r\nimport './OrdersHistory.scss';\r\n\r\ninterface OrderProps {\r\n  cart: CartType;\r\n  chosenCurrency: CURRENCY_TYPES;\r\n}\r\n\r\n/**\r\n * Orders history with pizza list and totals.\r\n *\r\n * @returns {JSX} - order history component.\r\n */\r\nconst OrdersHistory = (props: OrderProps): JSX.Element => {\r\n  const { orders, chosenCurrency } = props;\r\n\r\n  if (!orders) return null;\r\n\r\n  const ordersIds = Object.keys(orders);\r\n\r\n  const createDate = (timestamp: string | number): string => {\r\n    const date = new Date(Number(timestamp));\r\n\r\n    return `${date.getDay()}.${date.getMonth()}.${date.getFullYear()}`;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        ordersIds.map((key) => {\r\n          return (\r\n            <article key={key} className=\"order-list-item\">\r\n              <Row>\r\n                <Col xs={12}>\r\n                  <Title size={TITLE_SIZES.SM} className=\"order-date\">\r\n                    { createDate(key) }\r\n                  </Title>\r\n                </Col>\r\n              </Row>\r\n              <Order cart={orders[key]} chosenCurrency={chosenCurrency} noCartAction={true} />\r\n            </article>\r\n          );\r\n        })\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(OrdersHistory);\r\n","import { connect } from 'react-redux';\r\nimport OrdersHistory from '@components/OrdersHistory/OrdersHistory';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.user.orders,\r\n    chosenCurrency: state.session.currency,\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(OrdersHistory);\r\n","import React, { memo } from 'react';\r\nimport OrdersHistoryContainer from '@containers/OrdersHistoryContainer';\r\nimport Title, { TITLE_SIZES } from '@components/common/Title/Title';\r\n\r\n/**\r\n * Main page.\r\n *\r\n * @returns {JSX} - main page component.\r\n */\r\nconst OrdersHistoryPage = (): JSX.Element => {\r\n  return (\r\n    <section>\r\n      <Title tag=\"h1\" size={TITLE_SIZES.LG}>\r\n        Order history\r\n      </Title>\r\n      <OrdersHistoryContainer />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default memo(OrdersHistoryPage);\r\n","import React, {useEffect, useState} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from '@components/Header/Header';\r\nimport Footer from '@components/Footer/Footer';\r\nimport MainPage from '@pages/MainPage/MainPage';\r\nimport CheckoutPage from '@pages/CheckoutPage/CheckoutPage';\r\nimport { SessionType } from '@reducers/session-reducer';\r\nimport AuthRegModal from './components/AuthRegModal/AuthRegModal';\r\nimport OrdersHistoryPage from '@pages/OrderHistoryPage/OrdersHistoryPage';\r\nimport '@scss/style.scss';\r\n\r\ninterface AppProps {\r\n  session: SessionType;\r\n  getSessionData: Function;\r\n  changeCurrency: Function;\r\n}\r\n\r\nconst App = (props: AppProps): JSX.Element => {\r\n  const { session, user, getSessionData, changeCurrency, getUserData }= props;\r\n  const [ isModalOpen, setIsModalOpen ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (getSessionData) {\r\n      getSessionData();\r\n    }\r\n    if (getUserData) {\r\n      getUserData();\r\n    }\r\n  }, []);\r\n\r\n  const closeModal = (): void => {\r\n    setIsModalOpen(false);\r\n  }\r\n\r\n  const openModal = (): void => {\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Header user={user}\r\n              chosenCurrency={session.currency}\r\n              cartItemsQty={session.cart.totalQty}\r\n              changeCurrency={changeCurrency}\r\n              openAuthModalHandler={openModal} />\r\n      <main>\r\n        <Container>\r\n          <Route exact path=\"/\" component={MainPage} />\r\n          <Route path=\"/checkout\" component={CheckoutPage} />\r\n          <Route path=\"/order-history\" component={OrdersHistoryPage} />\r\n        </Container>\r\n      </main>\r\n      <Footer />\r\n\r\n      <AuthRegModal isModalOpen={isModalOpen && !user?.id}\r\n                    onHideHandler={closeModal}/>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport { getSessionData } from '@actions/session';\r\nimport { getUserData } from '@actions/user';\r\nimport { changeCurrency } from '@actions/session';\r\nimport App from '../App';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    session: state.session,\r\n    user: state.user,\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    getSessionData,\r\n    getUserData,\r\n    changeCurrency,\r\n  }\r\n  )(App);\r\n","import DatabaseHandler from '@api/databaseHandler';\r\nimport { getSessionDataAction } from './action-creators';\r\nimport { SessionType } from '@reducers/session-reducer';\r\nimport CookieHandler from '@utils/cookie/cookieHandler';\r\nimport {CURRENCY_TYPES} from '../../reducers/session-reducer';\r\n\r\nexport const getSessionData = (): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n    const sessionId = CookieHandler.getSessionId();\r\n\r\n    if (!sessionId) {\r\n      databaseHandler.createSession().then((data: SessionType) => {\r\n        CookieHandler.setSessionId(data.id);\r\n        dispatch(getSessionDataAction(data));\r\n      });\r\n    } else {\r\n      databaseHandler.getSessionData(sessionId).then((data: SessionType) => {\r\n        dispatch(getSessionDataAction(data));\r\n      }).catch((error) => {\r\n        console.log('Error: ', error);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const changeCurrency = (newCurrency: CURRENCY_TYPES): Function => {\r\n  return (dispatch) => {\r\n    const databaseHandler = DatabaseHandler.GET_INSTANCE();\r\n    const sessionId = CookieHandler.getSessionId();\r\n\r\n    if (!sessionId) {\r\n      databaseHandler.createSession().then((data: SessionType) => {\r\n        CookieHandler.setSessionId(data.id);\r\n        dispatch(getSessionDataAction(data));\r\n      });\r\n    } else {\r\n      databaseHandler.changeCurrency(sessionId, newCurrency).then((data: SessionType) => {\r\n        dispatch(getSessionDataAction(data));\r\n      }).catch((error) => {\r\n        console.log('Error: ', error);\r\n      });\r\n    }\r\n  }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport AppContainer from './containers/AppContainer';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AppContainer />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('pizza-app')\r\n);\r\n\r\n"],"sourceRoot":""}